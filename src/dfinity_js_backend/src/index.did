service: () -> {
    addAsset: (record {name:text; description:text; pricePerUnit:nat64; isTokenized:text; assetType:text; image:text; availableUnits:nat64}) -> (variant {Ok:record {id:text; owner:principal; name:text; createdAt:text; description:text; pricePerUnit:nat64; updatedAt:opt text; isTokenized:text; assetType:text; image:text; availableUnits:nat64}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
    addUser: (record {name:text; email:text; phone:text}) -> (variant {Ok:record {id:text; "principal":principal; name:text; assets:vec record {id:text; owner:principal; name:text; createdAt:text; description:text; pricePerUnit:nat64; updatedAt:opt text; isTokenized:text; assetType:text; image:text; availableUnits:nat64}; email:text; phone:text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
    completePayment: (principal, text, nat64, nat64, nat64) -> (variant {Ok:record {status:text; memo:nat64; seller:principal; price:nat64; paid_at_block:opt nat64}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
    createReservePay: (text, nat64) -> (variant {Ok:record {status:text; memo:nat64; seller:principal; price:nat64; paid_at_block:opt nat64}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
    getAddressFromPrincipal: (principal) -> (text) query;
    getAsset: (text) -> (variant {Ok:record {id:text; owner:principal; name:text; createdAt:text; description:text; pricePerUnit:nat64; updatedAt:opt text; isTokenized:text; assetType:text; image:text; availableUnits:nat64}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}}) query;
    getAssets: () -> (vec record {id:text; owner:principal; name:text; createdAt:text; description:text; pricePerUnit:nat64; updatedAt:opt text; isTokenized:text; assetType:text; image:text; availableUnits:nat64}) query;
    getUser: (text) -> (variant {Ok:record {id:text; "principal":principal; name:text; assets:vec record {id:text; owner:principal; name:text; createdAt:text; description:text; pricePerUnit:nat64; updatedAt:opt text; isTokenized:text; assetType:text; image:text; availableUnits:nat64}; email:text; phone:text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}}) query;
    getUserAssets: (text) -> (vec record {id:text; owner:principal; name:text; createdAt:text; description:text; pricePerUnit:nat64; updatedAt:opt text; isTokenized:text; assetType:text; image:text; availableUnits:nat64}) query;
    getUsers: () -> (vec record {id:text; "principal":principal; name:text; assets:vec record {id:text; owner:principal; name:text; createdAt:text; description:text; pricePerUnit:nat64; updatedAt:opt text; isTokenized:text; assetType:text; image:text; availableUnits:nat64}; email:text; phone:text}) query;
    updateAsset: (record {id:text; description:text; isTokenized:text; image:text}) -> (variant {Ok:record {id:text; owner:principal; name:text; createdAt:text; description:text; pricePerUnit:nat64; updatedAt:opt text; isTokenized:text; assetType:text; image:text; availableUnits:nat64}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
    updateUser: (record {id:text; email:text; phone:text}) -> (variant {Ok:record {id:text; "principal":principal; name:text; assets:vec record {id:text; owner:principal; name:text; createdAt:text; description:text; pricePerUnit:nat64; updatedAt:opt text; isTokenized:text; assetType:text; image:text; availableUnits:nat64}; email:text; phone:text}; Err:variant {PaymentFailed:text; InvalidPayload:text; NotFound:text; PaymentCompleted:text}});
    verifyPayment: (principal, nat64, nat64, nat64) -> (bool) query;
}
